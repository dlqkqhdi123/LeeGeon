import React, { useEffect, useState } from "react";
// import firebase from "./firebase";
function App() {
  return;
  <h1>gkdl</h1>;

  function App() {
    const [data, setData] = useState([]);

    useEffect(() => {
      // Firestore를 사용하는 경우
      // const firestoreRef = firebase.firestore().collection("your-collection");
      // 데이터 가져오기
      // databaseRef.on("value", (snapshot) => {
      // Firestore를 사용하는 경우
      // firestoreRef.onSnapshot((snapshot) => {
      //     const newData = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));
      //     setData(newData);
      // });
      // 실시간 업데이트를 수신하려면 useEffect의 cleanup 함수에서 이벤트 리스너를 제거해야 합니다.
      // return () => {
      //   databaseRef.off();
      //   // 또는
      //   // firestoreRef();
      // };
    }, []); // useEffect를 한 번만 실행하려면 두 번째 인자로 빈 배열을 전달합니다.

    return (
      <div>
        <h1>Firebase 데이터</h1>
        <ul>
          {data.map((item) => (
            <li key={item.id}>{item.someProperty}</li>
          ))}
        </ul>
      </div>
    );
  }
}

export default App;


// 아이디 구별해서 체크한 곳에만 띄우는 코드
async function idDatas(collectionName, checkId) {
  const Snapshot = await getDocs(
    query(collection(db, collectionName), where("memberId", "==", checkId))
  );
  return Snapshot.size;
}

